# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

import datetime
from publicsuffix2 import fetch
from publicsuffix2 import PublicSuffixList
from tranco import Tranco
from celery import Celery
app = Celery('manual_starter', broker='pyamqp://guest@localhost//',)



class Test1to10():
  def setup_method(self, method):
    # self.driver = webdriver.Firefox(executable_path="browsers/drivers/geckodriver")
    self.driver = webdriver.Remote(command_executor='http://localhost:4444/wd/hub', desired_capabilities=DesiredCapabilities.FIREFOX)
    self.vars = {}
    psl_file = fetch()
    self.psl = PublicSuffixList(psl_file)
    self.count = 0
    self.t = Tranco(cache=True, cache_dir=".tranco")
    self.tranco = self.t.list(date="2021-08-05")
    self.t_list = self.tranco.top(100000)
  
  def teardown_method(self, method):
    self.driver.quit()

  def start_crawl(self, tranco_rank):
    cookies = self.driver.get_cookies()
    site = self.driver.current_url
    site = self.get_site(site)
    tranco_site = self.t_list[tranco_rank - 1]
    tranco_real_rank = self.tranco.rank(site)
    # print(cookies)
    info = f"actual site: {site}, rank of actual site: {tranco_real_rank}, original site: {tranco_site}, original rank: {tranco_rank}"
    print(info)
    results = {"cookies": cookies, "cookie_end": str(datetime.datetime.now()), "tranco_rank": tranco_rank, "login": info}
    app.send_task("start_node.test_site", args=[site, cookies], kwargs={}, queue="node")
    app.send_task("main.save_results", args=[site, results], kwargs={})

  def get_site(self, url):
      try:
        hostname = url.split("://")[1].split("/")[0]
      except IndexError:
          hostname = url
      return self.psl.get_public_suffix(hostname)

